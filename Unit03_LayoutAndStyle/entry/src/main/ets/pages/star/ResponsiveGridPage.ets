import display from '@ohos.display'
import hilog from '@ohos.hilog'

// ËØæÁ®ãÂç°ÁâáÊï∞ÊçÆÁªìÊûÑ
interface CourseCard {
  id: number
  title: string
  description: string
  icon: string
  color: ResourceColor
}

@Entry
@Component
struct ResponsiveGridPage {
  @State title: string = ''
  // ËØæÁ®ãÊï∞ÊçÆ
  @State cards: CourseCard[] = [
    {
      id: 1,
      title: "ËØæÁ®ãÂ≠¶‰π†",
      description: "Âú®Á∫øËØæÁ®ãÂíåËßÜÈ¢ëÊïôÁ®ã",
      icon: "üìö",
      color: '#FBC527'
    },
    {
      id: 2,
      title: "‰Ωú‰∏öÊèê‰∫§",
      description: "Êèê‰∫§ÂíåÁÆ°ÁêÜ‰Ωú‰∏ö",
      icon: "üìù",
      color: Color.Green
    },
    {
      id: 3,
      title: "ÊàêÁª©Êü•ËØ¢",
      description: "Êü•ÁúãËÄÉËØïÊàêÁª©ÂíåÁªüËÆ°",
      icon: "üìä",
      color: Color.Pink
    },
    {
      id: 4,
      title: "ÈÄöÁü•ÂÖ¨Âëä",
      description: "Â≠¶Ê†°ÈÄöÁü•ÂíåÂÖ¨Âëä",
      icon: "üì¢",
      color: Color.Red
    },
    {
      id: 5,
      title: "Âú®Á∫øËÆ®ËÆ∫",
      description: "Â∏àÁîü‰∫§ÊµÅËÆ®ËÆ∫Âå∫",
      icon: "üí¨",
      color: Color.Gray
    },
    {
      id: 6,
      title: "ËµÑÊ∫ê‰∏ãËΩΩ",
      description: "Â≠¶‰π†ËµÑÊñôÂíåËµÑÊ∫ê",
      icon: "üì•",
      color: Color.Blue
    },
    {
      id: 7,
      title: "ËÄÉËØïÂÆâÊéí",
      description: "ËÄÉËØïÊó∂Èó¥ÂíåÂú∞ÁÇπ",
      icon: "üìÖ",
      color: Color.Grey
    },
    {
      id: 8,
      title: "Ê†°Âõ≠Ê¥ªÂä®",
      description: "ËØæÂ§ñÊ¥ªÂä®ÂíåÁ§æÂõ¢",
      icon: "üé≠",
      color: Color.Pink
    }
  ]
  @State columns: number = 2 // ÈªòËÆ§ÂàóÊï∞

  private updateColumns() {
    try {
      const displayInfo = display.getDefaultDisplaySync()
      const screenWidthPx = displayInfo.width
      const screenHeightPx = displayInfo.height
      const density = displayInfo.densityPixels // Ëé∑ÂèñÂ±èÂπïÂØÜÂ∫¶

      // ËΩ¨Êç¢‰∏∫ËôöÊãüÂÉèÁ¥† (VP)
      const screenWidthVp = screenWidthPx / density
      const screenHeightVp = screenHeightPx / density

      // console.log(`Â±èÂπï‰ø°ÊÅØ: ${screenWidthPx}x${screenHeightPx}px, ÂØÜÂ∫¶: ${density}, VP: ${screenWidthVp.toFixed(1)}x${screenHeightVp.toFixed(1)}vp`)
      hilog.info(0x0, 'ResponsiveGridExample',
        `Â±èÂπï‰ø°ÊÅØ: ${screenWidthPx}x${screenHeightPx}px, ÂØÜÂ∫¶: ${density}, VP: ${screenWidthVp.toFixed(1)}x${screenHeightVp.toFixed(1)}vp`)

      // Âà§Êñ≠ÊòØÂê¶‰∏∫Ê®™Â±è
      const isLandscape = screenWidthVp > screenHeightVp

      // Ê†πÊçÆÂ±èÂπïÂÆΩÂ∫¶ÂíåÊñπÂêëËÆæÁΩÆÂàóÊï∞
      if (screenWidthVp < 400) {
        // Â∞èÂ±èÊâãÊú∫ÔºöÂßãÁªà1Âàó
        this.columns = 1
      } else if (screenWidthVp < 600) {
        // ÊôÆÈÄöÊâãÊú∫ÔºöÁ´ñÂ±è2ÂàóÔºåÊ®™Â±è3Âàó
        this.columns = isLandscape ? 3 : 2
      } else if (screenWidthVp < 900) {
        // Â§ßÂ±èÊâãÊú∫/Â∞èÂπ≥ÊùøÔºöÁ´ñÂ±è3ÂàóÔºåÊ®™Â±è4Âàó
        this.columns = isLandscape ? 4 : 3
      } else {
        // Â§ßÂπ≥ÊùøÔºöÁ´ñÂ±è3ÂàóÔºåÊ®™Â±è4Âàó
        this.columns = isLandscape ? 4 : 3
      }

      // console.log(`Â±èÂπïÊñπÂêë: ${isLandscape ? 'Ê®™Â±è' : 'Á´ñÂ±è'}, ËÆæÁΩÆÂàóÊï∞: ${this.columns}`)
      hilog.info(0x0, 'ResponsiveGridExample', `Â±èÂπïÊñπÂêë: ${isLandscape ? 'Ê®™Â±è' : 'Á´ñÂ±è'}, ÂàóÊï∞: ${this.columns}`)

      // console.log(`ËÆæÁΩÆÂàóÊï∞: ${this.columns}`)
      hilog.info(0x0, 'ResponsiveGridExample', `ÂàóÊï∞: ${this.columns}`)
    } catch (error) {
      // console.error('Ëé∑ÂèñÂ±èÂπï‰ø°ÊÅØÂ§±Ë¥•:', error)
      hilog.error(0x0, 'ResponsiveGridExample', `Ëé∑ÂèñÂ±èÂπï‰ø°ÊÅØÂ§±Ë¥•: ${error}`)
      this.columns = 2 // ÈªòËÆ§2Âàó
    }
  }

  aboutToAppear() {
    let params = this.getUIContext().getRouter().getParams() as Record<string, Object>
    if (params) {
      this.title = params['title'] as string
    }
    this.updateColumns()
  }

  build() {
    Navigation() {
      Column() {
        Text(`ÂìçÂ∫îÂºèÁΩëÊ†ºÂ∏ÉÂ±Ä - ÂΩìÂâç ${this.columns} Âàó`)
          .fontSize(20)
          .fontColor(Color.Black)
          .margin({ bottom: 10 })

        Grid() {
          ForEach(this.cards, (card: CourseCard) => {
            GridItem() {
              Column({ space: 10 }) {
                Text(card.icon)
                  .fontSize(50)

                Text(card.title)
                  .fontSize(20)
                  .fontWeight(FontWeight.Medium)
                  .fontColor(Color.Black)

                Text(card.description)
                  .fontSize(16)
                  .fontColor(Color.Black)
                  .opacity(0.9)
                  .maxLines(2)
                  .textOverflow({ overflow: TextOverflow.Ellipsis })

                Button("ËøõÂÖ•")
                  .padding({
                    left: 5,
                    right: 5
                  })
                  .fontSize(16)
                  .backgroundColor('#fff')
                  .fontColor(card.color)
              }
              .width('100%')
              .height(180)
              .padding(5)
              .backgroundColor(card.color)
              .borderRadius(16)
              .justifyContent(FlexAlign.Center)
              .alignItems(HorizontalAlign.Center)
              .shadow({
                radius: 16,
                color: Color.Yellow,
                offsetX: 0,
                offsetY: 2
              })
            }
          })
        }
        .columnsTemplate(`1fr `.repeat(this.columns).trim())
        .rowsGap(10)
        .columnsGap(10)
        .padding(5)
        .width('100%')
      }
      .width('100%')
      .height('100%')
    }
    .title(this.title)
    .titleMode(NavigationTitleMode.Mini)
    .hideBackButton(false)
    .navBarWidth('100%')
    .navBarPosition(NavBarPosition.Start)
  }
}